<main class="bg-[#EAEBED] p-8">
    <div class="bg-[#EAEBED] h-full m-4 p-4">
        <form method="POST" action="" class="border border-gray-300 bg-white rounded-2xl flex flex-col">
            <div class="text-center font-bold text-4xl space-y-10 pt-4 flex flex-col items-center">
                <h1>Shopping Cart</h1>
                <hr class="w-2/3 border-gray-300">
            </div>
            {{#products}}
            <div class="text-center space-y-10 pt-10 flex flex-col items-center">
                <div class="flex w-full justify-around">
                    <div>
                        <img src="{{product.image}}" alt="Product Image" class="h-50">
                    </div>
                    <div>
                        <h2 class="font-bold text-lg">{{product.title}}</h2>
                        <p class="">Price: $<span id="{{product.id}}" data-price="{{product.price}}">{{product.price}}</span></p>
                    </div>
                    <div>
                        <input type="number" 
                               name="quantity" 
                               value="{{quantity}}" 
                               min="1" 
                               class="border rounded-md w-1/3 p-2"
                               data-product-id="{{product.id}}">
                    </div>
                    <div>
                        <img src="../api/public/svg/cancel.svg" alt="Cancel" class="h-10 cursor-pointer">
                    </div>
                </div>
                <hr class="w-2/3 border-gray-300">
            </div>
            {{/products}}
            <div class="space-y-4 mt-10 p-4 flex flex-col mx-auto items-center w-2/3 bg-gray-100 rounded-md">
                <h2 class="font-semibold text-lg">Order summary</h2>
                <div class="flex w-full justify-between border-b-1 border-b-gray-300 space-y-4">
                    <p>Subtotal</p>
                    <p class="subtotal">$42.00</p>
                </div>
                <div class="flex w-full justify-between border-b-1 border-b-gray-300 space-y-4">
                    <p>Shipping estimate</p>
                    <p class="shipping">$5.00</p>
                </div>
                <div class="flex w-full justify-between border-b-1 border-b-gray-300 space-y-4">
                    <p>Tax estimate</p>
                    <p class="tax">$3.00</p>
                </div>
                <div class="flex w-full justify-between border-b-1 border-b-gray-300 space-y-4 font-semibold">
                    <p>Order total</p>
                    <p class="total">$50.00</p>
                </div>
                <button type="submit" class="bg-[#303F9F] text-[#FFC107] w-2/3 text-md py-2 mt-1 rounded-md cursor-pointer hover:bg-[#FFC107] hover:text-[#303F9F]">
                    <p class="text-center font-bold">Checkout</p>
                </button>
            </div>
        </form>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const quantityInputs = document.querySelectorAll('input[name="quantity"]');
            const subtotalElement = document.querySelector('.subtotal');
            const shippingElement = document.querySelector('.shipping');
            const taxElement = document.querySelector('.tax');
            const totalElement = document.querySelector('.total');

            const updateProductTotal = (input) => {
                const productRow = input.closest('.flex.w-full.justify-around');
                const priceElement = productRow.querySelector('p > span');
                const unitPrice = parseFloat(priceElement.dataset.price);
                const quantity = parseInt(input.value);
                const totalPrice = (unitPrice * quantity).toFixed(2);
                priceElement.textContent = totalPrice;
                return totalPrice;
            };

            const updateOrderSummary = () => {
                let subtotal = 0;
                quantityInputs.forEach(input => {
                    const productRow = input.closest('.flex.w-full.justify-around');
                    const priceElement = productRow.querySelector('p > span');
                    const unitPrice = parseFloat(priceElement.dataset.price);
                    const quantity = parseInt(input.value);
                    subtotal += unitPrice * quantity;
                });

                const shipping = 5.00;
                const tax = 3.00;
                const total = subtotal + shipping + tax;

                subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
                shippingElement.textContent = `$${shipping.toFixed(2)}`;
                taxElement.textContent = `$${tax.toFixed(2)}`;
                totalElement.textContent = `$${total.toFixed(2)}`;
            };

            const updateQuantity = async (productId, quantity) => {
                try {
                    const response = await fetch('/api/products', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            product_id: productId,
                            quantity: quantity
                        })
                    });

                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.error || 'Erreur lors de la mise à jour');
                    }
                    
                    return data;
                } catch (error) {
                    console.error('Erreur:', error);
                    alert('Erreur lors de la mise à jour du panier');
                }
            };

            quantityInputs.forEach(input => {
                updateProductTotal(input);
                input.addEventListener('change', async () => {
                    if (input.value < 1) input.value = 1;
                    const productId = input.closest('.flex.w-full.justify-around')
                        .querySelector('p > span').id;
                    const quantity = parseInt(input.value);
                    
                    await updateQuantity(productId, quantity);
                    updateProductTotal(input);
                    updateOrderSummary();
                });
            });

            updateOrderSummary();
        });
    </script>
</main>

<!--<div class="cart">
        <h1>Your Shopping Cart</h1>
        {{#items}}
        <div class="cart-item">
            <h2>{{name}}</h2>
            <p>Price: ${{price}}</p>
            <p>Quantity: {{quantity}}</p>
        </div>
        {{/items}}
        <div class="cart-total">
        <h2>Total: ${{total}}</h2>
        </div>
    </div>-->