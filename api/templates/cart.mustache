<main class="bg-[#EAEBED] p-8 min-h-screen">
    <div class="w-full max-w-2xl mx-auto bg-white rounded-3xl shadow-2xl p-8 my-8">
        <h1 class="text-2xl md:text-3xl font-bold text-[#5242AE] mb-6 text-center">My shopping Cart</h1>
        <form method="" action="" class="space-y-8">
            {{#products}}
            <div class="cart-product-row flex flex-col md:flex-row items-center gap-4 border border-[#FFC107] rounded-lg p-4 shadow mb-4 bg-[#FFF8E1]" data-product-id="{{product.id}}">
                <img src="{{product.image}}" alt="Product Image" class="h-24 w-auto rounded-lg shadow border border-[#FFC107]" />
                <div class="flex-1 text-left">
                    <h2 class="font-bold text-lg text-[#303F9F]">{{product.title}}</h2>
                    <p class="text-[#303F9F]">Price: <span class="font-bold">${{product.price}}</span></p>
                    <p class="text-[#303F9F] item-subtotal">Subtotal: <span class="font-bold">${{item_subtotal}}</span></p>
                </div>
                <div>
                    <input  type="number" 
                            name="quantity" 
                            value="{{quantity}}" 
                            min="1" 
                            class="border border-[#FFC107] rounded-lg w-20 p-2 text-center text-[#303F9F]"
                            data-product-id="{{product.id}}"
                            data-price="{{product.price}}">
                </div>
                <button type="button" class="cart-cancel-btn ml-2">
                    <img src="../api/public/svg/cancel.svg" alt="Cancel" class="h-8 cursor-pointer hover:scale-110 transition" />
                </button>
            </div>
            {{/products}}
            <div class="bg-[#EAEBED] rounded-xl p-6 mt-8 shadow space-y-4">
                <h2 class="text-xl font-bold text-[#5242AE] mb-4 text-center">Order Summary</h2>
                <div class="flex justify-between">
                    <span class="text-[#303F9F]">Subtotal</span>
                    <span class="subtotal font-semibold text-[#303F9F]">$42.00</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-[#303F9F]">Shipping estimate</span>
                    <span class="shipping font-semibold text-[#303F9F]">$5.00</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-[#303F9F]">Tax estimate</span>
                    <span class="tax font-semibold text-[#303F9F]">$3.00</span>
                </div>
                <div class="flex justify-between font-bold text-lg border-t pt-2">
                    <span class="text-[#303F9F]">Order total</span>
                    <span class="total text-[#FFC107]">$50.00</span>
                </div>
                <button type="submit" class="w-full bg-[#FFC107] text-[#303F9F] py-3 rounded-xl font-bold text-lg shadow hover:bg-[#ffdb70] transition mt-4">
                    Checkout
                </button>
            </div>
        </form>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const quantityInputs = document.querySelectorAll('input[name="quantity"]');
            const subtotalElement = document.querySelector('.subtotal');
            const shippingElement = document.querySelector('.shipping');
            const taxElement = document.querySelector('.tax');
            const totalElement = document.querySelector('.total');

            const updateOrderSummary = () => {
                let subtotal = 0;
                document.querySelectorAll('.cart-product-row').forEach(row => {
                    const priceElement = row.querySelector('p > span.font-bold');
                    const unitPrice = parseFloat(priceElement.textContent.replace('$', ''));
                    const quantityInput = row.querySelector('input[name="quantity"]');
                    const quantity = parseInt(quantityInput.value);
                    const itemSubtotal = unitPrice * quantity;
                    subtotal += itemSubtotal;
                    
                    // Mettre à jour le sous-total de l'article
                    const itemSubtotalElement = row.querySelector('.item-subtotal > span');
                    if (itemSubtotalElement) {
                        itemSubtotalElement.textContent = `$${itemSubtotal.toFixed(2)}`;
                    }
                });

                const shipping = 5.00;
                const tax = 3.00;
                const total = subtotal + shipping + tax;

                subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
                shippingElement.textContent = `$${shipping.toFixed(2)}`;
                taxElement.textContent = `$${tax.toFixed(2)}`;
                totalElement.textContent = `$${total.toFixed(2)}`;
            };

            quantityInputs.forEach(input => {
                input.addEventListener('change', () => {
                    if (input.value < 1) input.value = 1;
                    updateOrderSummary();
                    
                    // Ajouter la logique pour mettre à jour la quantité via l'API
                    const productId = input.getAttribute('data-product-id');
                    const quantity = parseInt(input.value);
                    
                    fetch('api/products', {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ product_id: productId, quantity: quantity })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            alert('Erreur lors de la mise à jour de la quantité.');
                        }
                    })
                    .catch(() => {
                        alert('Erreur de communication avec le serveur.');
                    });
                });
            });

            // Remove item from cart (frontend + backend)
            document.querySelectorAll('.cart-cancel-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productRow = btn.closest('.cart-product-row');
                    const productId = productRow.getAttribute('data-product-id');

                    // Remove from backend/session
                    fetch('/api/removeFromCart.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ product_id: productId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            productRow.remove();
                            updateOrderSummary();
                        } else {
                            alert('Could not remove item from cart.');
                        }
                    })
                    .catch(() => {
                        alert('Error communicating with server.');
                    });
                });
            });

            updateOrderSummary();
        });
    </script>
</main>

